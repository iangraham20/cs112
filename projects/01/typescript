Script started on Tue 14 Feb 2017 08:44:10 PM EST
igc2@eckert-mauchly:~/workspace/cs112/proj01$ ls
Debug	  PlayList.cpp	PlayListTester.cpp  Song.cpp  SongTester.cpp  TestSavePlaylist.txt  testSongs.txt  UserInterface.cpp
main.cpp  PlayList.h	PlayListTester.h    Song.h    SongTester.h    testSongOutput.txt    typescript	   UserInterface.h
igc2@eckert-mauchly:~/workspace/cs112/proj01$ cat main.co pp Song.h Song.CP  cpp SongTester.h SongTester.cpp S PlayList.h PlayList.cpp PlayListTester.h PlayListTester.cpp UserInterface.h UserInterface.cpp
/* main.cpp tests the classes in our project.
 * Student Name: Ian G. Christensen (igc2)
 * Date: February 12, 2017
 * Begun by: Joel Adams, for CS 112 proj01 at Calvin College.
 */

#include "SongTester.h"
#include "PlayListTester.h"
#include "UserInterface.h"

int main() {
   SongTester sTester;
   sTester.runTests();
   PlayListTester plTester;
   plTester.runTests();
   UserInterface();
}
/* Song.h declares a class for storing song information.
 * Student Name: Ian G. Christensen (igc2)
 * Date: February 12, 2017
 * Begun by: Joel Adams, for CS 112 proj01 at Calvin College.
 */

#ifndef SONG_H
#define SONG_H
#include <iostream>
#include <string>
using namespace std;

class Song {
public:
	Song();
	Song(const string& title, const string& artist, unsigned year);
	void readFrom(istream& in);
	void writeTo(ostream& out) const;
	string getTitle() const;
	string getArtist() const;
	unsigned getYear() const;
	bool operator==(const Song& song2) const;
private:
  string   myTitle;
  string   myArtist;
  unsigned myYear;
};

#endif /*SONG_H_*/
/* Song.cpp defines the methods for class Song (see Song.h).
 * Student Name: Ian G. Christensen (igc2)
 * Date: February 12, 2017
 * Begun by: Joel Adams, for CS 112 proj01 at Calvin College.
 */

#include "Song.h"
#include <cstdlib>

/* Song default constructor
* Postcondition: myTitle and myArtist are empty strings
*            && myYear == 0.
*/
Song::Song() {
  myTitle = myArtist = "";
  myYear = 0;
}

/* getter method for myTitle
 * Return: myTitle
 */
string Song::getTitle() const {
  return myTitle;
}

/* getter method for myArtist
 * Return: myArtist
 */
string Song::getArtist() const {
  return myArtist;
}

/* getter method for myYear
 * Return: myYear
 */
unsigned Song::getYear() const {
  return myYear;
}

/* Explicit constructor
 * @param: title, a string
 * @param: artist, a string
 * @year: an unsigned int.
 * Postcondition: myTitle == title &&
 *                myArtist == artist &&
 *                myYear == year.
 */
Song::Song(const string& title, const string& artist, unsigned year) {
   myTitle = title;
   myArtist = artist;
   myYear = year;
}

/* Song input method...
 * @param: in, an istream
 * Precondition: in contains the title, artist, and year data for a Song.
 * Postcondition: the title, artist, and year data have been read from in &&
 *                 myTitle == title &&
 *                 myArtist == artist &&
 *                 myYear == year.
 */
void Song::readFrom(istream& in) {
   getline(in, myTitle);
   getline(in, myArtist);
   string yearString;
   getline(in, yearString);
   myYear = atoi( yearString.c_str() );
}

/* Song output...
 * @param: out, an ostream
 * Postcondition: out contains myTitle, a newline,
 *                             myArtist, a newline,
 *                             myYear, and a newline.
 */
void Song::writeTo(ostream& out) const {
	out << myTitle << '\n'
	    << myArtist << '\n'
	    << myYear  << '\n';
}
/* Redefinition of the boolean equals operator
 * @param: Song, a string
 * return:
 */
bool Song::operator==(const Song& song2) const {
	return myTitle == song2.getTitle() && myArtist == song2.getArtist() && myYear == song2.getYear();
}
/* SongTester.h declares a test-class for class Song.
 * Student Name: Ian G. Christensen (igc2)
 * Date: February 12, 2017
 * Begun by: Joel Adams, for CS 112 proj01 at Calvin College.
 */

#ifndef SONGTESTER_H_
#define SONGTESTER_H_

class SongTester {
public:
	void runTests();
	void testConstructors();
	void testReadFrom();
	void testWriteTo();
	void testOperator();
};

#endif /*SONGTESTER_H_*/
/* SongTester.cpp defines the test-methods for class SongTester.
 * Student Name: Ian G. Christensen (igc2)
 * Date: February 12, 2017
 * Begun by: Joel Adams, for CS 112 proj01 at Calvin College.
 */

#include "SongTester.h"
#include "Song.h"
#include <iostream>
#include <ostream>
#include <fstream>
#include <cassert>
using namespace std;

void SongTester::runTests() {
	cout << "Testing class Song..." << endl;
	testConstructors();
	testReadFrom();
	testWriteTo();
	testOperator();
	cout << "All tests passed!" << endl;
}

void SongTester::testConstructors() {
    cout << "- constructors ... " << flush;
    // default constructor
    Song s;
    assert( s.getTitle() == "" );
    assert( s.getArtist() == "" );
    assert( s.getYear() == 0 );
    cout << " 0 " << flush;
    // explicit constructor
    Song s1("Badge", "Cream", 1969);
    assert( s1.getTitle() == "Badge" );
    assert( s1.getArtist() == "Cream" );
    assert( s1.getYear() == 1969 );
    cout << " 1 " << flush;
    cout << " Passed!" << endl;
   }

void SongTester::testReadFrom() {
	cout << "- readFrom()... " << flush;
	ifstream fin("testSongs.txt");
	assert( fin.is_open() );
	Song s;

	// read first song in test playlist
	s.readFrom(fin);
	assert( s.getTitle() == "Call Me Maybe" );
	assert( s.getArtist() == "Carly Rae Jepsen" );
	assert( s.getYear() == 2012 );
	cout << " 0 " << flush;
	string separator;
	getline(fin, separator);

	// read second song in test playlist
	s.readFrom(fin);
	assert( s.getTitle() == "Let It Be" );
	assert( s.getArtist() == "The Beatles" );
	assert( s.getYear() == 1967 );
	cout << " 1 " << flush;
	getline(fin, separator);

	// read third song in test playlist
	s.readFrom(fin);
	assert( s.getTitle() == "Let It Be" );
	assert( s.getArtist() == "Joan Baez" );
	assert( s.getYear() == 1971 );
	cout << " 2 " << flush;
	getline(fin, separator);

	// read fourth song in test playlist
	s.readFrom(fin);
	assert( s.getTitle() == "Penny Lane");
	assert( s.getArtist() == "The Beatles");
	assert( s.getYear() == 1967);
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
	}

void SongTester::testWriteTo() {
	cout << "- writeTo()... " << flush;

	// declare three songs
	Song s1("Badge", "Cream", 1969);
	Song s2("Godzilla", "Blue Oyster Cult", 1977);
	Song s3("Behind Blue Eyes", "The Who", 1971);

	// write the three songs to an output file
	ofstream fout("testSongOutput.txt");
	assert( fout.is_open() );
	s1.writeTo(fout);
	s2.writeTo(fout);
	s3.writeTo(fout);
	fout.close();

	// use readFrom() to see if writeTo() worked
	ifstream fin("testSongOutput.txt");
	assert( fin.is_open() );
	Song s4, s5, s6;

	// read and check the first song
	s4.readFrom(fin);
	assert( s4.getTitle() == "Badge" );
	assert( s4.getArtist() == "Cream" );
	assert( s4.getYear() == 1969 );
	cout << " 0 " << flush;

	// read and check the second song
	s5.readFrom(fin);
	assert( s5.getTitle() == "Godzilla" );
	assert( s5.getArtist() == "Blue Oyster Cult" );
	assert( s5.getYear() == 1977 );
	cout << " 1 " << flush;

	// read and check the third song
	s6.readFrom(fin);
	assert( s6.getTitle() == "Behind Blue Eyes" );
	assert( s6.getArtist() == "The Who" );
	assert( s6.getYear() == 1971 );
	cout << " 2 " << flush;

	fin.close();
	cout << " Passed!" << endl;
}

void SongTester::testOperator() {
	cout << "- Operator()... " << flush;

	// declare six songs
	Song s1("Badge", "Cream", 1969);
	Song s2("Godzilla", "Blue Oyster Cult", 1977);
	Song s3("Behind Blue Eyes", "The Who", 1971);
	Song s4("Badge", "Cream", 1969);
	Song s5("Godzilla", "Blue Oyster Cult", 1977);
	Song s6("Behind Blue Eyes", "The Who", 1971);

	assert( s1.operator==(s4) );
	cout << " 0 " << flush;

	assert( s2.operator==(s5) );
	cout << " 1 " << flush;

	assert( s3.operator==(s6) );
	cout << " 2 " << flush;

	assert( !( s1 == s2 ) );
	cout << " 3 " << flush;

	assert( !( s4 == s5 ) );
	cout << " 4 " << flush;

	assert( !( s2 == s6 ) );
	cout << " 5 " << flush;

	cout << "Passed!" << endl;
}
/* PlayList.h declares class PlayList.
 * Student Name: Ian G. Christensen (igc2)
 * Date: February 12, 2017
 * Begun by: Joel Adams, for CS 112 proj01 at Calvin College.
 */

#ifndef PLAYLIST_H_
#define PLAYLIST_H_
#include "Song.h"
#include <vector>   // STL vector
#include <string>
using namespace std;

   class PlayList {
   public:
      PlayList(const string& fileName);
      vector<Song> searchByArtist(const string& artist) const;
      vector<Song> searchByYear(unsigned year) const;
      vector<Song> searchByTitlePhrase(const string& phrase);
      void addSong(const Song& newSong);
      void removeSong(const Song& aSong);
      void save() const;
      unsigned getNumSongs() const;
   private:
      string myFileName;
      vector<Song> mySongs;
   };

   #endif /*PLAYLIST_H_*/
/* PlayList.h declares class PlayList.
 * Student Name: Ian G. Christensen (igc2)
 * Date: February 12, 2017
 * Begun by: Joel Adams, for CS 112 proj01 at Calvin College.
 */

#include "PlayList.h"
#include "Song.h"
#include <fstream>      // ifstream
#include <cassert>      // assert()
using namespace std;


   /* PlayList constructor
    * @param: fileName, a string
    * Precondition: fileName contains the name of a playlist file.
    */
   PlayList::PlayList(const string& fileName) {
	      // open a stream to the playlist file
	      ifstream fin( fileName.c_str() );
	      assert( fin.is_open() );

	      // read each song and append it to mySongs
	      Song s;
	      while (true) {
	          s.readFrom(fin);
	          if ( !fin ) { break; }
	          string separator;
	          getline(fin, separator);
	          mySongs.push_back(s);
	      }

	      myFileName = fileName;

	      // close the stream
	      fin.close();
   }

   /* Retrieve length of the playlist
    * Return: the number of songs in the playlist.
    */
   unsigned PlayList::getNumSongs() const {
	      return mySongs.size();
   }

   /* Search by artist
    * @param: artist, a string.
    * Return: a vector containing all the Songs in mySongs by artist.
    */
   vector<Song> PlayList::searchByArtist(const string& artist) const {
      vector<Song> v;
      for (unsigned i = 0; i < mySongs.size(); i++) {
         if ( mySongs[i].getArtist().find(artist) != string::npos ) {
            v.push_back( mySongs[i] );
         }
      }

      return v;
   }

   /* Search by year
    * @param: year, a string.
    * Return: a vector containing all the Songs in mySongs by year.
    */
   vector<Song> PlayList::searchByYear(unsigned year) const {
	   vector<Song> v;

	   for (unsigned i = 0; i < mySongs.size(); i++) {
		   if ( mySongs[i].getYear() == year ) {
			   v.push_back( mySongs[i] );
		   }
	   }
	   return v;
   }

   /* Search by title phrase
    * @param: phrase, a string.
    * Return: a vector containing all the Songs in mySongs by phrase.
    */
   vector<Song> PlayList::searchByTitlePhrase(const string& phrase) {
	   vector<Song> v;
		for (unsigned i = 0; i < mySongs.size(); i++) {
			if ( mySongs[i].getTitle().find(phrase) != string::npos ) {
				v.push_back( mySongs[i] );
		   }
	   }
	   return v;
   }

   /* Add a song to the playlist
    * @param: Song, a string.
    */
   void PlayList::addSong(const Song& newSong) {
	   mySongs.push_back(newSong);
   }

   /* Remove a song from the playlist
    * @param: Song, a string.
    * Precondition: song must exist in playlist.
    */
   void PlayList::removeSong(const Song& aSong) {
	   for ( unsigned i=0; i < mySongs.size(); i++ ) {
		   if ( aSong == mySongs[i] )
			   mySongs.erase( mySongs.begin() + i);
	   }
   }

   void PlayList::save() const {
	   ofstream fout ( myFileName.c_str() );
	   assert( fout.is_open() );
	   for ( unsigned i=0; i < mySongs.size(); i++ ) {
		   mySongs[i].writeTo(fout);
		   fout << "\n";
	   }
	   fout.close();
   }
/* PlayListTester.h tests the PlayList class.
 * Student Name: Ian G. Christensen (igc2)
 * Date: February 12, 2017
 * Begun by: Joel Adams, for CS 112 proj01 at Calvin College.
 */

#ifndef PLAYLISTTESTER_
#define PLAYLISTTESTER_
#include "PlayList.h"

   class PlayListTester {
   public:
       void runTests();
       void testConstructors();
       void testSearchByArtist();
       void testSearchByYear();
       void testSearchByTitlePhrase();
       void testAddSong();
       void testRemoveSong();
       void testSaveSong();
       void testSave() const;
   };

   #endif /*PLAYLISTTESTER_*/
/* PlayListTester.cpp defines the PlayList test-methods.
 * Student Name: Ian G. Christensen (igc2)
 * Date: February 12, 2017
 * Begun by: Joel Adams, for CS 112 proj01 at Calvin College.
 */

#include "PlayListTester.h"
#include "PlayList.h"
#include <iostream>
#include <fstream>
#include <cassert>
using namespace std;

void PlayListTester::runTests() {
  cout << "\nTesting class PlayList..." << endl;
  testConstructors();
  testSearchByArtist();
  testSearchByYear();
  testSearchByTitlePhrase();
  testAddSong();
  testRemoveSong();
  testSave();
  cout << "All tests passed!" << endl;
}

void PlayListTester::testConstructors() {
  cout << "- constructors..." << flush;
  PlayList pList("testSongs.txt");
  assert( pList.getNumSongs() == 4 );
  cout << " 0 " << flush;

  cout << " Passed!" << endl;
}

void PlayListTester::testSearchByArtist() {
  cout << "- searchByArtist()... " << flush;
  // load a playlist with test songs
  PlayList pList("testSongs.txt");

  // empty case (0)
  vector<Song> searchResult = pList.searchByArtist("Cream");
  assert( searchResult.size() == 0 );
  cout << " 0 " << flush;

  // case of 1
  searchResult = pList.searchByArtist("Baez");
  assert( searchResult.size() == 1 );
  assert( searchResult[0].getTitle() == "Let It Be" );
  cout << " 1 " << flush;

  // case of 2
  searchResult = pList.searchByArtist("Beatles");
  assert( searchResult.size() == 2 );
  assert( searchResult[0].getTitle() == "Let It Be" );
  assert( searchResult[1].getTitle() == "Penny Lane" );
  cout << " 2 " << flush;

  cout << " Passed!" << endl;
}

void PlayListTester::testSearchByYear() {
	cout << "- searchByYear()... " << flush;
	// load a playlist with test songs
	PlayList pList("testSongs.txt");

	// empty case (0)
	vector<Song> searchResult = pList.searchByYear(2015);
	assert( searchResult.size() == 0 );
	cout << " 0 " << flush;

	// case of 1
	searchResult = pList.searchByYear(2012);
	assert( searchResult.size() == 1 );
	assert( searchResult[0].getTitle() == "Call Me Maybe" );
	cout << " 1 " << flush;

	// case of 2
	searchResult = pList.searchByYear(1967);
	assert( searchResult.size() == 2 );
	assert( searchResult[0].getTitle() == "Let It Be" );
	assert( searchResult[1].getTitle() == "Penny Lane" );
	cout << " 2 " << flush;

	cout << " Passed!" << endl;
   }

void PlayListTester::testSearchByTitlePhrase() {
	cout << "- searchByTitlePhrase()... " << flush;
	// load a playlist with test songs
	PlayList pList("testSongs.txt");

	// empty case (0)
	vector<Song> searchResult = pList.searchByTitlePhrase("Gibberish");
	assert( searchResult.size() == 0 );
	cout << " 0 " << flush;

	// case of 1
	searchResult = pList.searchByTitlePhrase("It Be");
	assert( searchResult.size() == 2);
	assert( searchResult[0].getTitle() == "Let It Be");
	assert( searchResult[1].getTitle() == "Let It Be");
	cout << " 1 " << flush;

	// case of 2
	searchResult = pList.searchByTitlePhrase("e");
	assert( searchResult.size() == 4 );
	assert( searchResult[0].getTitle() == "Call Me Maybe");
	assert( searchResult[1].getTitle() == "Let It Be" );
	assert( searchResult[2].getTitle() == "Let It Be" );
	assert( searchResult[3].getTitle() == "Penny Lane" );
	cout << " 2 " << flush;

	cout << " Passed!" << endl;
}

void PlayListTester::testAddSong() {
	cout << "- AddSong()... " << flush;

	// load a playlist with test songs
	PlayList pList("testSongs.txt");
	assert( pList.getNumSongs() == 4 );

	// add song to playlist
	Song s1("Be My Escape", "Relient K", 2014);
	pList.addSong(s1);

	// test for playlist length and added song
	assert( pList.getNumSongs() == 5 );
	vector<Song> searchResult = pList.searchByTitlePhrase("Be My Escape");
	assert( searchResult.size() == 1 );
	cout << " 0 " << flush;
	cout << " Passed!" << endl;
}

void PlayListTester::testRemoveSong() {
	cout << "- RemoveSong()... " << flush;
	PlayList pList("testSongs.txt");
	assert( pList.getNumSongs() == 4 );

	Song s1("Be My Escape", "Relient K", 2014);
	pList.addSong(s1);

	assert( pList.getNumSongs() == 5 );
	vector<Song> searchResult = pList.searchByTitlePhrase("Be My Escape");
	assert(searchResult.size() == 1);

	pList.removeSong(s1);
	assert( pList.getNumSongs() == 4 );
	searchResult = pList.searchByTitlePhrase("Be My Escape");
	assert(searchResult.size() == 0);
	cout << " 0 " << flush;
	cout << " Passed!" << endl;
}

void PlayListTester::testSave() const {
   cout << "- Save()... " << flush;
   PlayList pList("TestSavePlaylist.txt");

   // Add Songs
   Song s1("TestTitle1", "TestArtist1", 2001);
   pList.addSong(s1);
   Song s2("TestTitle2", "TestArtist2", 2002);
   pList.addSong(s2);
   Song s3("TestTitle3", "TestArtist3", 2003);
   pList.addSong(s3);

   pList.save();

   // read test
   ifstream fin("TestSavePlaylist.txt");
   assert( fin.is_open() );
   Song s4, s5, s6;

   // read and test next song
   s4.readFrom(fin);
   assert( s4.getTitle() == "TestTitle1" );
   assert( s4.getArtist() == "TestArtist1" );
   assert( s4.getYear() == 2001 );
   cout << " 0 " << flush;
   string separator;
   getline(fin, separator);

   // read and test next song
   s5.readFrom(fin);
   assert( s5.getTitle() == "TestTitle2" );
   assert( s5.getArtist() == "TestArtist2" );
   assert( s5.getYear() == 2002 );
   cout << " 1 " << flush;
   getline(fin, separator);
   cout << " Passed!" << endl;

}
/* UserInterface.h
 * Student Name: Ian G. Christensen (igc2)
 * Date: February 12, 2017
 * Begun by: Joel Adams, for CS 112 proj01 at Calvin College.
 */

#ifndef USERINTERFACE_H_
#define USERINTERFACE_H_
using namespace std;

class UserInterface {
public:
	UserInterface();
};


#endif /* USERINTERFACE_H_ */
/* UserInterface.cpp
 * Student Name: Ian G. Christensen (igc2)
 * Date: February 12, 2017
 * Begun by: Joel Adams, for CS 112 proj01 at Calvin College.
 */

#include "UserInterface.h"
#include "PlayList.h"
#include "Song.h"
#include <string>
#include <iostream>
#include <cstdlib>
using namespace std;

/* UserInterface constructor
 */

UserInterface::UserInterface() {
	PlayList pList("testSongs.txt");
	int menuSelection = -1;
	while ( true ) {
		menuSelection = -1;
		cout << "\nWelcome to the PlayList Manager!\n"
				"\nPlease enter:\n"
				"1 - to search the playlist for songs by a given artist\n"
				"2 - to search the playlist for songs from a given year\n"
				"3 - to search the playlist for songs with a given phrase in their title\n"
				"4 - to add a new song to the playlist\n"
				"5 - to remove a song from a playlist\n"
				"6 - to save a playlist\n"
				// ... other options ...
				"0 - to quit\n"
				"--->\n" << flush;


		cin >> menuSelection;

		// searchByArtist
		if ( menuSelection == 1 ) {
			cout << "Please enter an artist:\n" << flush;
			string artist;
			cin >> artist;
			string temp;
			cin >> temp;
			cout << "\nThe playlist contains the following songs from the given artist:\n" << flush;

			vector<Song> searchResults = pList.searchByArtist(artist);
			for ( unsigned i=0; i < searchResults.size(); i++ ) {
				searchResults[i].writeTo(cout);
			}
		}

		// searchByYear
		else if ( menuSelection == 2 ) {
			cout << "Please enter a year:\n" << flush;
			unsigned year;
			cin >> year;
			cout << "\nThe playlist contains the following songs the given year:\n" << flush;

			vector<Song> searchResults = pList.searchByYear(year);
			for ( unsigned i=0; i < searchResults.size(); i++ ) {
				searchResults[i].writeTo(cout);
			}
		}

		// searchByTitlePhrase
		else if ( menuSelection == 3 ) {
			cout << "Please enter a phrase:\n" << flush;
			string phrase;
			cin >> phrase;
			string temp;
			cin >> temp;
			cout << "\nThe playlist contains the following songs with the given phrase:\n" << flush;

			vector<Song> searchResults = pList.searchByTitlePhrase(phrase);
			for ( unsigned i=0; i < searchResults.size(); i++ ) {
				searchResults[i].writeTo(cout);
			}
		}

		// addSong
		else if ( menuSelection == 4 ) {

			string title;
			string artist;
			string yearString;
			cout << "Please enter a song title:\n" << flush;
			getline( cin, title );
			getline( cin, title );
			cout << "Please enter an artist name:\n" << flush;
			getline( cin, artist );
			cout << "Please enter a year:\n" << flush;
			getline( cin, yearString );
			unsigned year = atoi( yearString.c_str() );
			Song s( title, artist, year );

			pList.addSong(s);
			cout << "The song was added to the playlist" << endl;
		}

		// removeSong
		else if ( menuSelection == 5 ) {

			string title;
			string artist;
			string yearString;

			cout << "Please enter a song title:\n" << flush;
			getline( cin, title );
			getline( cin, title );
			cout << "Please enter an artist name:\n" << flush;
			getline( cin, artist );
			cout << "Please enter a year:\n" << flush;
			getline( cin, yearString );
			unsigned year = atoi(yearString.c_str());
			Song input(title, artist, year);

			pList.removeSong( input );
			cout << "The song was added to the playlist." << endl;
		}

		// SavePlaylist
		else if ( menuSelection == 6 ) {
			pList.save();
			cout << "\nSaved" << endl;
		}

		// QuitProgram
		else if ( menuSelection == 0 ) {
			cout << "\nQuiting...";
			break;
		}
	}
}

igc2@eckert-mauchly:~/workspace/cs112/proj01$ cd Debug
igc2@eckert-mauchly:~/workspace/cs112/proj01/Debug$ ls
main.d	main.o	makefile  objects.mk  PlayList.d  PlayList.o  PlayListTester.d	PlayListTester.o  proj01  project01  Song.d  Song.o  SongTester.d  SongTester.o  sources.mk  subdir.mk	UserInterface.d  UserInterface.o
igc2@eckert-mauchly:~/workspace/cs112/proj01/Debug$ make all
make: Nothing to be done for 'all'.
igc2@eckert-mauchly:~/workspace/cs112/proj01/Debug$ cd ..
igc2@eckert-mauchly:~/workspace/cs112/proj01$ ./Debug/proj01
Testing class Song...
- constructors ...  0  1  Passed!
- readFrom()...  0  1  2  3 Passed!
- writeTo()...  0  1  2  Passed!
- Operator()...  0  1  2  3  4  5 Passed!
All tests passed!

Testing class PlayList...
- constructors... 0  Passed!
- searchByArtist()...  0  1  2  Passed!
- searchByYear()...  0  1  2  Passed!
- searchByTitlePhrase()...  0  1  2  Passed!
- AddSong()...  0  Passed!
- RemoveSong()...  0  Passed!
- Save()...  0  1  Passed!
All tests passed!

Welcome to the PlayList Manager!

Please enter:
1 - to search the playlist for songs by a given artist
2 - to search the playlist for songs from a given year
3 - to search the playlist for songs with a given phrase in their title
4 - to add a new song to the playlist
5 - to remove a song from a playlist
6 - to save a playlist
0 - to quit
--->
1
Please enter an artist:
The Beatles

The playlist contains the following songs from the given artist:
Let It Be
The Beatles
1967
Penny Lane
The Beatles
1967

Welcome to the PlayList Manager!

Please enter:
1 - to search the playlist for songs by a given artist
2 - to search the playlist for songs from a given year
3 - to search the playlist for songs with a given phrase in their title
4 - to add a new song to the playlist
5 - to remove a song from a playlist
6 - to save a playlist
0 - to quit
--->
2
Please enter a year:
1967

The playlist contains the following songs the given year:
Let It Be
The Beatles
1967
Penny Lane
The Beatles
1967

Welcome to the PlayList Manager!

Please enter:
1 - to search the playlist for songs by a given artist
2 - to search the playlist for songs from a given year
3 - to search the playlist for songs with a given phrase in their title
4 - to add a new song to the playlist
5 - to remove a song from a playlist
6 - to save a playlist
0 - to quit
--->
3
Please enter a phrase:
Let It

The playlist contains the following songs with the given phrase:
Let It Be
The Beatles
1967
Let It Be
Joan Baez
1971

Welcome to the PlayList Manager!

Please enter:
1 - to search the playlist for songs by a given artist
2 - to search the playlist for songs from a given year
3 - to search the playlist for songs with a given phrase in their title
4 - to add a new song to the playlist
5 - to remove a song from a playlist
6 - to save a playlist
0 - to quit
--->
4
Please enter a song title:
Be My Escape
Please enter an artist name:
Relient K
Please enter a year:
2004
The song was added to the playlist

Welcome to the PlayList Manager!

Please enter:
1 - to search the playlist for songs by a given artist
2 - to search the playlist for songs from a given year
3 - to search the playlist for songs with a given phrase in their title
4 - to add a new song to the playlist
5 - to remove a song from a playlist
6 - to save a playlist
0 - to quit
--->
1
Please enter an artist:
Relient K

The playlist contains the following songs from the given artist:
Be My Escape
Relient K
2004

Welcome to the PlayList Manager!

Please enter:
1 - to search the playlist for songs by a given artist
2 - to search the playlist for songs from a given year
3 - to search the playlist for songs with a given phrase in their title
4 - to add a new song to the playlist
5 - to remove a song from a playlist
6 - to save a playlist
0 - to quit
--->
2 5
Please enter a song title:
Be M  y Escape
Please enter an artist name:
Relient K
Please enter a year:
2004
The song was added to the playlist.

Welcome to the PlayList Manager!

Please enter:
1 - to search the playlist for songs by a given artist
2 - to search the playlist for songs from a given year
3 - to search the playlist for songs with a given phrase in their title
4 - to add a new song to the playlist
5 - to remove a song from a playlist
6 - to save a playlist
0 - to quit
--->
2
Please enter a year:
2004

The playlist contains the following songs the given year:

Welcome to the PlayList Manager!

Please enter:
1 - to search the playlist for songs by a given artist
2 - to search the playlist for songs from a given year
3 - to search the playlist for songs with a given phrase in their title
4 - to add a new song to the playlist
5 - to remove a song from a playlist
6 - to save a playlist
0 - to quit
--->
6

Saved

Welcome to the PlayList Manager!

Please enter:
1 - to search the playlist for songs by a given artist
2 - to search the playlist for songs from a given year
3 - to search the playlist for songs with a given phrase in their title
4 - to add a new song to the playlist
5 - to remove a song from a playlist
6 - to save a playlist
0 - to quit
--->
0

Quiting...igc2@eckert-mauchly:~/workspace/cs112/proj01$ exit

Script done on Tue 14 Feb 2017 08:49:24 PM EST
