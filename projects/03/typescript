Script started on Tue 28 Feb 2017 12:04:34 AM EST
igc2@eckert-mauchly:~/workspace/cs112/proj03$ ls
Application.cpp  Application.h	Debug  tester.cpp  typescript  Vec.cpp	Vec.h  vecStreamOut.txt  vecTest1Copy.txt  vecTest1.txt  vecTest2Copy.txt  vecTest2.txt  VecTester.cpp	VecTester.h
igc2@eckert-mauchly:~/workspace/cs112/proj03$ cat Application.            tester.cpp a Vec.cpp V  V[1@V[1@e[1@c[1@.[1@ [1P[1@h[1@ Vec.cpp Vec. Tester.h Vec  Tester.cpp Application.h Application.cpp
/* tester.cpp drives the testing of our Vec class.
 * Student Name: Ian Graham Christensen (igc2)
 * Date: February 21, 2017
 * Begun by: Joel Adams, for CS 112 lab 3 at Calvin College.
 */

#include "VecTester.h"
#include "Application.h"

int main() {
	VecTester vt;
	vt.runTests();
	Application app;
	app.runApplication();
}
/* Vec.h provides a simple vector class named Vec.
 * Student Name: Ian Graham Christensen (igc2)
 * Date: February 21, 2017
 * Begun by: Joel Adams, for CS 112 lab 3 at Calvin College.
 */

#ifndef VEC_H_
#define VEC_H_

#include <iostream>
using namespace std;

typedef double Item;

class Vec {
public:
	Vec();
	Vec(unsigned size);
	Vec(const Vec& original);
	virtual ~Vec();
	
	Vec& operator=(const Vec& original);
	unsigned getSize() const { return mySize; };
	void setItem(unsigned index, const Item& it);
	Item getItem(unsigned index) const;
	void setSize(unsigned newSize);
	bool operator==(const Vec& v2) const;
	bool operator!=(const Vec& v2) const;
	void writeTo(ostream& out) const;
	void readFrom(istream& in);
	Item& operator[](unsigned index); // write
	const Item& operator[](unsigned index) const; // read
	void readFrom(const string& fileName);
	void writeTo(const string& filename) const;
	Vec operator+(const Vec& v2);
	const Vec operator-(const Vec& v2) const;
	Item operator*(const Vec& v2);

private:
	unsigned mySize;
	Item *   myArray;
	friend class VecTester;
};

#endif /*VEC_H_*/
/* Vec.cpp defines the methods for Vec, a simple vector class.
 * Student Name: Ian Graham Christensen (igc2)
 * Date: February 21, 2017
 * Begun by: Joel Adams, for CS 112 lab 3 at Calvin College.
 * Ian's Methods: Subscript (write), writeTo, addition, multiplication
 * Thomas's Methods: Subscript (read), readTo, subtraction, inequality
 */
 
#include "Vec.h"
#include <stdexcept>
#include <cstdlib>
#include <iostream>
#include <fstream>

// The default constructor method for the vec class sets the size to zero and the pointer to null
Vec::Vec() {
	mySize = 0;
	myArray = NULL;
}

// The explicit constructor method for the vec class sets the size and assigns default vales to the array
Vec::Vec(unsigned size) {
	mySize = size;
	myArray = new Item[size];
	if ( size > 0 ) {
		for ( unsigned i = 0; i < size; i++ ) {
			myArray[i] = 0;
		}
	}
	else {
			myArray = NULL;
		}
	}

// The copy constructor method for the vec class copies only the values of the array
Vec::Vec(const Vec& original) {
	mySize = original.mySize;
	if ( original.mySize > 0 ) {
		myArray = new Item[mySize];
		for ( unsigned i = 0; i < mySize; i++ ) {
			myArray[i] = original.myArray[i];
		}
	}
	else {
		myArray = NULL;
	}
}

// The destructor method for the vec class eliminates any memory leaks
Vec::~Vec() {
	delete[] myArray;
	myArray = NULL;
	mySize = 0;
}

// The assignment operator for the vec class copies one vec into another
Vec& Vec::operator=(const Vec& original) {
	if ( this != &original ) {
		if ( mySize > 0 ) {
			delete[] myArray;
			myArray = NULL;
		}
		if ( original.mySize > 0 ) {
			myArray = new Item[original.mySize];
		}
	mySize = original.mySize;
	}
	for ( unsigned i = 0; i < mySize; i++ ) {
		myArray[i] = original.myArray[i];
	}
return *this;
}

// The value mutator for the vec class allows the user to set an index
void Vec::setItem(unsigned index, const Item& it) {
	if ( mySize == 0 ) {
		throw range_error( "The vec is empty" );
	}
	if ( index >= mySize ) {
		throw range_error( "The set location is out of range" );
	}
 	if ( index < 0 ) {
		throw range_error( "index cannot be less than zero" );
	}
	else {
		myArray[index] = it;
	}
}

// The value accessor for the vec class allows the user to get an index
Item Vec::getItem(unsigned index) const {
	if ( mySize == 0 ) {
		throw range_error( "The vec is empty" );
	}
	if ( index >= mySize ) {
		throw range_error( "The set location is out of range" );
	}
 	if ( index < 0 ) {
		throw range_error( "index cannot be less than zero" );
	}
	else {
		return myArray[index];
	}
}

// The size mutator for the vec class sets the size of the array
void Vec::setSize(unsigned newSize) {
	if ( mySize != newSize ) {
		Item* newArray = new Item[newSize];

		if ( newSize == 0 ) {
			delete [] myArray;
			myArray = NULL;
			mySize = 0;
			return;
			}

		else if ( newSize > mySize ) {
			for ( unsigned i = 0; i < mySize; i++ ) {
				newArray[i] = myArray[i];
			}
			for ( unsigned i = mySize; i < newSize; i++ ) {
				newArray[i] = 0;
			}
		}
		else {
			for ( unsigned i = 0; i < newSize; i++ ) {
				newArray[i] = myArray[i];
			}
		}
		mySize = newSize;
		delete [] myArray;
		myArray = newArray;
	}
}

// The equality operator for the vec class compares two arrays and checks that they are equal
bool Vec::operator==(const Vec& v2) const {
	if ( mySize != v2.mySize ) {
		return false;
	}
	for ( unsigned i = 0; i < mySize; i++ ) {
		if ( myArray[i] != v2.myArray[i] ) {
			return false;
		}
	}
	return true;
}


// The inequality operator for the vec class compares two arrays and checks that they are not equal
bool Vec::operator!=(const Vec& v2) const {
	return !operator==(v2);
}

// The write method for the vec class writes values to the output stream
void Vec::writeTo(ostream& out) const {
	for ( unsigned i = 0; i < mySize; i++ ) {
		out << myArray[i] << "\n";
	}
}

// The read method for the vec class reads values from the input stream
void Vec::readFrom(istream& in) {
	if(myArray != NULL) {
		delete [] myArray;
	}

	myArray = new Item[mySize];
	for ( unsigned i = 0; i < mySize; i++ ) {
		in >> myArray[i];
	}
}

// Subscript read operator
const Item& Vec::operator[](unsigned index) const {
	if ( mySize == 0 ) {
		throw range_error( "The vec is empty" );
	}
	if ( index >= mySize ) {
		throw range_error( "The set location is out of range" );
	}
	return myArray[index];
	}


// Subscript write operator
Item& Vec::operator[](unsigned index) {
	if ( mySize == 0 ) {
		throw range_error( "The vec is empty" );
	}
	if ( index >= mySize ) {
		throw range_error( "The set location is out of range" );
	}
	return myArray[index];
	}

// write to file
void Vec::writeTo(const string& filename) const {
	ofstream fout( filename.c_str() );
	fout << mySize << '\n';
	writeTo(fout);
	fout.close();
}

// read from file
void Vec::readFrom(const string& fileName) {
	ifstream fin(fileName.c_str() );
	fin >> mySize;
	readFrom(fin);
	fin.close();
}

// Addition operator
Vec Vec::operator+( const Vec& v2 ) {
	if ( mySize != v2.getSize() ) {
		throw invalid_argument( "The vector sizes were not equal" );
	}
	else {
		Vec newVec(mySize);
		for ( unsigned i = 0; i < mySize; i++ ) {
			newVec[i] = myArray[i] + v2[i];
		}
		return newVec;
	}
}

// Subtraction operator
const Vec Vec::operator-(const Vec& v2) const {
	if (v2.mySize != mySize) {
		throw invalid_argument("Vec::operator-(): The two Vecs are different sizes, and cannot be subtracted.");
	}
	Vec subVec(mySize);
	for (unsigned i = 0; i < mySize; i++) {
		subVec.setItem(i, getItem(i) - v2.getItem(i));
	}
	return subVec;
}

// Multiplication operator
Item Vec::operator*( const Vec& v2 ) {
	Item total = 0;
	if ( mySize != v2.getSize() ) {
		throw invalid_argument( "The vector sizes were not equal" );
	}
	else {
		for ( unsigned i = 0; i < mySize; i++ ) {
			total += myArray[i] * v2[i];
		}
		return total;
	}
}
/* VecTester.h provides unit tests for Vec, a simple vector class.
 * Student Name: Ian Graham Christensen (igc2)
 * Date: February 21, 2017
 * Begun by: Joel Adams, for CS 112 lab 3 at Calvin College.
 */
 
#ifndef VECTESTER_H_
#define VECTESTER_H_

#include "Vec.h"

class VecTester {
public:
	void runTests() const;
	void testDefaultConstructor() const;
	void testExplicitConstructor() const;
	void testDestructor() const;
	void testGetSize() const;
	void testSetItem() const;
	void testGetItem() const;
	void testSetSize() const;
	void testCopyConstructor() const;
	void testAssignment() const;
	void testEquality() const;
	void testWriteToStream() const;
	void testReadFromStream() const;
	void testSubscript() const; // write
	void testInequality() const;
	void testAddition() const;
	void testSubtraction() const;
	void testDotProduct() const;
	void testReadFromFile() const;
	void testWriteToFile() const;
};

#endif /*VECTESTER_H_*/
/* VecTester.cpp defines the unit test-methods for Vec, a simple vector class.
 * Student Name: Ian Graham Christensen (igc2)
 * Date: February 21, 2017
 * Begun by: Joel Adams, for CS 112 lab 3 at Calvin College.
 */
 
#include "VecTester.h"
#include <iostream>     // cout, cerr, ...
#include <fstream>      // ifstream, ofstream, ...
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // range_error, ...
using namespace std;

void VecTester::runTests() const {
	cout << "Testing class Vec" << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testDestructor();
	testAssignment();
	testGetSize();
	testSetItem();
	testGetItem();
	testSetSize();
	testEquality();
	testWriteToStream();
	testReadFromStream();
	testSubscript(); // write
	testInequality();
	testAddition();
	testSubtraction();
	testDotProduct();
	testReadFromFile();
	testWriteToFile();
	cout << "All tests passed!" << endl;
}

void VecTester::testDefaultConstructor() const {
	cout << "Testing default constructor... " << flush;
	Vec v;
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed!" << endl;
}

void VecTester::testExplicitConstructor() const {
	cout << "Testing explicit constructor... " << flush;
	cout << " 1 " << flush;
	Vec v1(3);
	assert( v1.mySize == 3 );
	assert( v1.myArray != NULL );
	for (int i = 0; i < 3; i++) {
		assert( v1.myArray[i] == 0 );
	}
	cout << " 2 " << flush;
	Vec v2(8);
	assert( v2.mySize == 8 );
	assert( v2.myArray != NULL );
	for (int i = 0; i < 8; i++) {
		assert( v2.myArray[i] == 0 );
	}
	cout << " 3 " << flush;
	Vec v3(0);
	assert( v3.mySize == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testCopyConstructor() const {
	cout << "Testing copy constructor..." << flush;
	cout << " 1 " << flush;
	Vec v1;
	Vec v2(v1);
	assert( v2.mySize == 0 );
	assert( v2.myArray == NULL);

	cout << " 2 " << flush;
	Vec v3(5);
	Vec v4(v3);
	assert(v4.mySize == 5);
	assert(v4.myArray != NULL);
	assert(v4.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == 0 );
	}

	cout << " 3 " << flush;
	Vec v5(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.myArray[i] = (i+1);
	}
	Vec v6(v5);
	assert( v6.mySize == 5 );
	assert( v6.myArray != NULL );
	assert( v6.myArray != v5.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == v5.myArray[i] );
	}
	cout << "Passed!" << endl;
}

void VecTester::testDestructor() const {
	cout << "Testing destructor... " << flush;
	Vec v(5);
	v.~Vec();
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed, but make sure ~Vec() is returning the array's memory to the system!" << endl;
}

void VecTester::testAssignment() const {
	cout << "Testing =..." << flush;
	// empty-to-empty
	Vec v, v0;
	v = v0;
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout << " 0 " << flush;
	// empty-to-nonempty
	Vec v1;
	Vec v2(5);
	v2 = v1;
	assert(v2.mySize == 0);
	assert(v2.myArray == NULL);
	cout << " 1 " << flush;
	// nonempty-to-empty
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.myArray[i] = (i+1);
	}
	Vec v4;
	v4 = v3;
	assert( v4.mySize == 5 );
	assert( v4.myArray != v3.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == (i+1) );
	}
	cout << " 2 " << flush;
	// nonempty-to-nonempty (larger into smaller)
	Vec v5(2);
	for (unsigned i = 0; i < 2; i++) {
		v5.myArray[i] = (i+1)*10;
	}
	v5 = v3;
	assert(v5.mySize == 5);
	assert(v5.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v5.myArray[i] == (i+1) );
	}
	cout << " 3 " << flush;
	// nonempty-to-nonempty (smaller into larger)
	Vec v6(7);
	for (unsigned i = 0; i < 7; i++) {
		v6.myArray[i] = (i+1)*10;
	}
	v6 = v3;
	assert(v6.mySize == 5);
	assert(v6.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == (i+1) );
	}
	cout << " 4 " << flush;
	// nonempty-to-nonempty (equal sized)
	Vec v7(5);
	for (unsigned i = 0; i < 5; i++) {
		v7.myArray[i] = (i+1)*10;
	}
	v7 = v3;
	assert(v7.mySize == 5);
	assert(v7.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v7.myArray[i] == (i+1) );
	}
	cout << " 5 " << flush;
	// assignment chaining
	Vec v8;
	Vec v9(4);
	v9 = v8 = v3;
	assert( v9.mySize == 5 );
	assert( v9.mySize == 5 );
	assert( v8.myArray != v3.myArray );
	assert( v8.myArray != v3.myArray );
	assert( v9.myArray != v8.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v8.myArray[i] == (i+1) );
		assert( v9.myArray[i] == (i+1) );
	}
	cout << " 6 " << flush;
	// self-assignment (idiotic but legal)
	v3 = v3;
	assert( v3.mySize == 5 );
	assert( v3.myArray != NULL );
	for (unsigned i = 0; i < 5; i++) {
		assert(v3.myArray[i] == (i+1) );
	}
	cout << " 7 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testGetSize() const {
	cout << "Testing getSize()..." << flush;
	Vec v1;
	assert( v1.getSize() == 0 );
	cout << " 1 " << flush;
	Vec v2(5);
	assert( v2.getSize() == 5 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSetItem() const {
	cout << "Testing setItem()... " << flush;
	// empty case
	Vec v0;
	try {
		v0.setItem(0, 11);
		cerr << "setItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// nonempty case, valid subscript
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.myArray[i] == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty case, invalid subscript
	Vec v2(3);
	try {
		v2.setItem(3, 33);
		cerr << "setItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testGetItem() const {
	cout << "Testing getItem()... " << flush;
	// empty Vec
	Vec v0;
	try {
		v0.getItem(0);
		cerr << "getItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// non-empty, valid access
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.getItem(i) == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty Vec, invalid index
	Vec v2(3);
	try {
		v2.getItem(3);
		cerr << "getItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSetSize() const {
	cout << "Testing setSize()..." << flush;
	// empty
	Vec v0;
	v0.setSize(3);
	assert( v0.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v0.getItem(i) == 0 );
	}
	cout << " 0 " << flush;

	// non-empty, increasing
	Vec v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i+1);
	}
	Item * saveAddress = v1.myArray;
	v1.setSize(8);
	assert( v1.getSize() == 8 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v1.getItem(i) == (i+1) );
	}
	for (unsigned i = 5; i < 8; i++) {
		assert( v1.getItem(i) == 0 );
	}
	assert( v1.myArray != saveAddress );
	cout << " 1 " << flush;

	// non-empty, decreasing
	Vec v2(5);
	for (unsigned i = 0; i < 5; i++) {
		v2.setItem(i, i+1);
	}
	saveAddress = v2.myArray;
	v2.setSize(3);
	assert( v2.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v2.getItem(i) == (i+1) );
	}
	assert( v2.myArray != saveAddress );
	cout << " 2 " << flush;

	// non-empty, same-size
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.setItem(i, i+1);
	}
	saveAddress = v3.myArray;
	v3.setSize(5);
	assert( v3.getSize() == 5 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v3.getItem(i) == (i+1) );
	}
	assert( v3.myArray == saveAddress );
	cout << " 3 " << flush;
	// set size to zero
	v3.setSize(0);
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testEquality() const {
	cout << "Testing ==..." << flush;
	// empty case
	Vec v1;
	Vec v2;
	assert( v1 == v2 );
	cout << " 1 " << flush;

	// nonempty, same size, default values
	Vec v3(5);
	Vec v4(5);
	assert( v3 == v4 );
	cout << " 2 " << flush;

	// nonempty, same size, set values
	Vec v5(5);
	Vec v6(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.setItem(i, i+1);
		v6.setItem(i, i+1);
	}
	assert( v5 == v6 );
	cout << " 3 " << flush;

	// empty vs nonempty
	Vec v7;
	Vec v8(5);
	assert( !(v7 == v8) );
	cout << " 4 " << flush;

	// nonempty, same size, first value different
	Vec v9(5);
	Vec v10(5);
	Vec v11(5);
	Vec v12(5);
	v10.setItem(0, 1);
	assert( !(v9 == v10) );
	cout << " 5 " << flush;

	// nonempty, same size, middle value different
	v11.setItem(2, 1);
	assert( !(v9 == v11) );
	cout << " 6 " << flush;

	// nonempty, same size, last value different
	v12.setItem(4, 1);
	assert( !(v9 == v12) );
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testWriteToStream() const {
      cout << "Testing writeTo(ostream)... " << flush;
      Vec v1(5);
      for (unsigned i = 0; i < 5; i++) {
              v1.setItem(i, i+10);
      }
	// write to an ofstream instead of cout, to automate the test
      ofstream fout("vecStreamOut.txt");
      assert( fout.is_open() );
      fout << v1.getSize() << "\n";
      v1.writeTo(fout);
	fout.close();
	// now read in what we just wrote...
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
      unsigned size;
      fin >> size;
      assert( size == 5 );
      double value;
      for (unsigned i = 0; i < 5; i++) {
              fin >> value;
              assert( value == i+10 );
      }
      cout << "Passed! See 'vecStreamOut.txt' for values..." <<
      endl;
}

void VecTester::testReadFromStream() const {
      cout << "Testing readFrom(istream)... " << flush;
	// an ifstream is-an istream, so use one to automate the test
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
	// get the size and build the Vec
      unsigned size;
      fin >> size;
      assert( size == 5 );
      Vec v(size);
	// test readFrom()
      v.readFrom(fin);
      for (unsigned i = 0; i < 5; i++) {
              assert( v.getItem(i)== i+10 );
      }
	fin.close();
      cout << "Passed!" << endl;
}

void VecTester::testSubscript() const {
	cout << "Testing subscript( )..." << flush;
	// test empty case
	Vec v0;
	try {
		v0[5];
		cerr << "subscript()_succeed on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// Nonempty case, valid subscript
	Vec v1(4);
	v1[0] = 1;
	try {
		v1.getItem(0) == 1;
		cout << " 1 " << flush;
	} catch (range_error&) {
		cout << "Failed" << flush;
	}
	// Nonempty case, invalid subscript
	Vec v2(8);
	try {
		v2[10] = 2;
		cerr << "subscript() succeeded beyond end of Vec";
		cout << "Failed" << flush;
	} catch (range_error&) {
		cout << " 2 " << flush;
	}

	// Nonempty case, valid subscript
	Vec v3(6);
	v3[0] = 3;
	try {
		v3.getItem(0) == 3;
		cout << " 3 " << flush;
	} catch (range_error&) {
		cout << "Failed" << flush;
	}

	cout << "Passed!" << endl;
}

void VecTester::testInequality() const {
	cout << "Testing !=... " << flush;
	// empty
	Vec v0;
	Vec v1;
	assert( !(v0 != v1) );
	cout << " 0 " << flush;
	// empty vs nonempty
	Vec v2(3);
	assert( v1 != v2 );
	cout << " 1 " << flush;
	// equal sized, same values
	Vec v3(3);
	Vec v4(3);
	assert( !(v3 != v4) );
	cout << " 2 " << flush;
	// equal sized, different values
	for (unsigned i = 0; i < 3; i++) {
		v4.myArray[i] = i+1;
	}
	assert( v3 != v4 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testAddition() const {
	cout << "Testing +... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;    // for test 2 below
	Vec v3 = v1 + v2;
	assert( v3.getItem(0) == 3 );
	assert( v3.getItem(1) == 6 );
	assert( v3.getItem(2) == 9 );
	cout << " 1 " << flush;
	// addition should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 + v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 + v4;
		cerr << "v2 + v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSubtraction() const {
	cout << "Testing -... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	Vec v3 = v1 - v2;
	assert( v3.getItem(0) == -1 );
	assert( v3.getItem(1) == -2 );
	assert( v3.getItem(2) == -3 );
	cout << " 1 " << flush;
	// subtraction should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 - v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 - v4;
		cerr << "v2 - v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testDotProduct() const {
	cout << "Testing *... " << flush;
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	double product = v1 * v2;
	assert( product == 28 );
	cout << " 1 " << flush;
	// dot product should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	product = v4 * v5;
	assert( product == 0 );
	cout << " 3 " << flush;
	// different sizes
	try {
		product = v2 * v4;
		cerr << "v2 * v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testReadFromFile() const {
	cout << "Testing readFrom()... " << flush;
	Vec v1;
	v1.readFrom("vecTest1.txt");
	assert( v1.getSize() == 3 );
	assert( v1.myArray != NULL );
	assert( v1.getItem(0) == 1 );
	assert( v1.getItem(1) == 2 );
	assert( v1.getItem(2) == 3 );
	cout << " 1 " << flush;

	Vec v2(5);
	Item* oldAddr = v2.myArray;
	v2.readFrom("vecTest2.txt");
	assert( v2.getSize() == 4 );
	cout << " 2 " << flush;
	assert( v2.myArray != NULL );
	assert( v2.getItem(0) == 2 );
	assert( v2.getItem(1) == 4 );
	assert( v2.getItem(2) == 6 );
	assert( v2.getItem(3) == 8 );
       /* the last assertion assumes that the new array's base
        *  address is different from the old array's base address,
        *  which may not be true. If your method seems to be right,
        *  is correctly using delete to deallocate the old array,
        *  and passes all assertions except this one, you may
        *  comment out this assertion.
        */
	assert( v2.myArray != oldAddr );
	cout << " 3 " << flush;
	cout << "Passed! Make sure you close the file..." << endl;
}

void VecTester::testWriteToFile() const {
	cout << "Testing writeTo()... " << flush;
	// read a vector we know into an empty Vec...
	Vec v1;
	v1.readFrom("vecTest1.txt");
	// make a copy of it in a different file
	v1.writeTo("vecTest1Copy.txt");
	cout << " 1 " << flush;
	cout << "vecTest1Copy.txt created " << flush;
	// read in the copy, and check it
	Vec v3;
	v3.readFrom("vecTest1Copy.txt");
      assert( v3.getSize() == 3 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 1 );
      assert( v3.getItem(1) == 2 );
      assert( v3.getItem(2) == 3 );
      cout << " 2 " << flush;

	// read a vector we know into a nonempty Vec...
	Vec v2(5);
	v2.readFrom("vecTest2.txt");
	// make a copy of it in a different file
	v2.writeTo("vecTest2Copy.txt");
	cout << " 3 " << flush;
	cout << "vecTest2Copy.txt created " << flush;
	// read in the copy and check it
	v3.readFrom("vecTest2Copy.txt");
      assert( v3.getSize() == 4 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 2 );
      assert( v3.getItem(1) == 4 );
      assert( v3.getItem(2) == 6 );
      assert( v3.getItem(3) == 8 );
      cout << " 4 " << flush;
	cout << "Passed!  Make sure you closed the file..." << endl;
}

/*
 * Application.h
 * Student Name: Ian Graham Christensen (igc2)
 * Date: February 21, 2017
 */

#ifndef APPLICATION_H_
#define APPLICATION_H_

class Application {
public:
	void runApplication();
};



#endif /* APPLICATION_H_ */
/*
 * Application.cpp
 * Student Name: Ian Graham Christensen (igc2)
 * Date: February 21, 2017
 */

#include "Application.h"
#include "Vec.h"
#include <vector>
#include <iostream>
#include <cstdlib>
using namespace std;

void Application::runApplication() {
	vector<Vec> userVec;
	cout << "Welcome to the application\n" << endl;

	cout << "Please enter the number of dimensions for your vector" << endl;
	unsigned dimensions = 0;
	cin >> dimensions;
	if ( dimensions > 0 ) {
		cout << "Please enter the starting position of your vector" << endl;
		Vec start(dimensions);
		start.readFrom(cin);
		userVec.push_back(start);

		while (true) {
		cout << "Enter a movement vector: " << endl;
		Vec moveVec(dimensions);
		moveVec.readFrom(cin);
		userVec.push_back(moveVec);
		cout << "add another? [y/n]" << endl;
		char answer;
		cin >> answer;
		if ( answer != 'y' ) {
			break;
		}

		Vec finalLocation(dimensions);
		while ( userVec.size() > 0 ) {
			finalLocation = finalLocation + userVec.back();
			userVec.pop_back();
		}

		cout << "The final location is as follows: " << endl;
		finalLocation.writeTo(cout);
		}
	} else {
		cout << "A vector must have a range greater than zero." << endl;
		}
	cout << "\nProgram has been closed" << flush;
	}
igc2@eckert-mauchly:~/workspace/cs112/proj03$ cd Debg ug
igc2@eckert-mauchly:~/workspace/cs112/proj03/Debug$ ls  ls
Application.d  Application.o  makefile	objects.mk  proj03  sources.mk	subdir.mk  tester.d  tester.o  Vec.d  Vec.o  VecTester.d  VecTester.o
igc2@eckert-mauchly:~/workspace/cs112/proj03/Debug$ make all
make: Nothing to be done for 'all'.
igc2@eckert-mauchly:~/workspace/cs112/proj03/Debug$ cd ..
igc2@eckert-mauchly:~/workspace/cs112/proj03$ ./Debug/
bash: ./Debug/: Is a directory
igc2@eckert-mauchly:~/workspace/cs112/proj03$ /.  / ./Debug/proj03
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2  3  4 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing subscript( )... 0  1  2  3 Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
All tests passed!
Welcome to the application

Please enter the number of dimensions for your vector
3
Please enter the starting position of your vector
1
0
0
Enter a movement vector: 
0
1
0
add another? [y/n]
y
The final location is as follows: 
1
1
0
Enter a movement vector: 
0
0
1
add another? [y/n]
y
The final location is as follows: 
0
0
1
Enter a movement vector: 
1
2
3
add another? [y/n]
n

Program has been closedigc2@eckert-mauchly:~/workspace/cs112/proj03$ exit

Script done on Tue 28 Feb 2017 12:09:03 AM EST
